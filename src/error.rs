use std::result;
use std::error;
use std::io;
use std::fmt;

use num::traits::FromPrimitive;
use byteorder;

/// A type for results generated by this crate's functions where the `Err` type
/// is hard-wired to `enums::Error`.
///
/// This typedef is generally used to avoid writing out `enums::Error` directly and
/// is otherwise a direct mapping to `std::result::Result`.

pub type Result<T> = result::Result<T, Error>;


/// The error type for various operations.
///
/// Extends `io::Error` with following
///
/// `InvalidInputSnappy` - Snappy failed to decode response from Kafka
///
/// `UnexpectedEOF` - Raised from `byteorder` when decoding values fails.
///
/// `NoHostReachable` - Unable to reach any host.
///
/// `CodecError` - Error while encoding or decoding request/response
///
/// Kafka Errors from https://cwiki.apache.org/confluence/display/KAFKA/A+Guide+To+The+Kafka+Protocol#AGuideToTheKafkaProtocol-ErrorCodes

#[derive(Debug)]
pub enum Error {
    Io(io::Error),
    InvalidInputSnappy,
    UnexpectedEOF,
    CodecError,
    NoHostReachable,
    Unknown,
    OffsetOutOfRange,
    InvalidMessage,
    UnknownTopicOrPartition,
    InvalidMessageSize,
    LeaderNotAvailable,
    NotLeaderForPartition,
    RequestTimedOut,
    BrokerNotAvailable,
    ReplicaNotAvailable,
    MessageSizeTooLarge,
    StaleControllerEpochCode,
    OffsetMetadataTooLargeCode,
    OffsetsLoadInProgressCode,
    ConsumerCoordinatorNotAvailableCode,
    NotCoordinatorForConsumerCode
}


impl FromPrimitive for Error {
    fn from_i16(n: i16) -> Option<Error> {
        match n {
            1 => Some(Error::OffsetOutOfRange),
            2 => Some(Error::InvalidMessage),
            3 => Some(Error::UnknownTopicOrPartition),
            4 => Some(Error::InvalidMessageSize),
            5 => Some(Error::LeaderNotAvailable),
            6 => Some(Error::NotLeaderForPartition),
            7 => Some(Error::RequestTimedOut),
            8 => Some(Error::BrokerNotAvailable),
            9 => Some(Error::ReplicaNotAvailable),
            10 => Some(Error::MessageSizeTooLarge),
            11 => Some(Error::StaleControllerEpochCode),
            12 => Some(Error::OffsetMetadataTooLargeCode),
            14 => Some(Error::OffsetsLoadInProgressCode),
            15 => Some(Error::ConsumerCoordinatorNotAvailableCode),
            16 => Some(Error::NotCoordinatorForConsumerCode),
            -1 => Some(Error::Unknown),
            _ => None
        }
    }
    fn from_i64(_: i64) -> Option<Error> {
        Some(Error::Unknown)
    }
    fn from_u64(_: u64) -> Option<Error> {
        Some(Error::Unknown)
    }
}




impl From<io::Error> for Error {
    fn from(err: io::Error) -> Error { Error::Io(err) }
}


impl From<byteorder::Error> for Error {
    fn from(err: byteorder::Error) -> Error {
        match err {
            byteorder::Error::UnexpectedEOF => Error::UnexpectedEOF,
            byteorder::Error::Io(err) => Error::Io(err)
        }
    }
}

impl Clone for Error {
    fn clone(&self) -> Error {
        match *self {
            Error::Io(ref err) => Error::Io(io::Error::new(err.kind(), "Io Error")),
            ref x => x.clone()
        }
    }
}

impl error::Error for Error {
    fn description(&self) -> &str {
        match *self {
            Error::Io(ref err) => error::Error::description(err),
            Error::InvalidInputSnappy => "Snappy decode error. Invalid Input",
            Error::UnexpectedEOF => "Unexpected EOF",
            Error::NoHostReachable => "No Host Reachable",
            Error::CodecError => "Encoding Decoding Error",
            _ => "Kafka Error" // TODO Add others
        }
    }

    fn cause(&self) -> Option<&error::Error> {
        match *self {
            Error::Io(ref err) => err.cause(),
            _ => None
        }
    }
}

impl fmt::Display for Error {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            Error::Io(ref err) => err.fmt(f),
            Error::InvalidInputSnappy => write!(f, "{}", "Snappy decode error. Invalid Input"),
            Error::UnexpectedEOF => write!(f, "Unexpected EOF"),
            Error::NoHostReachable => write!(f, "No Host Reachable"),
            Error::CodecError => write!(f, "Encoding Decoding Error"),
            _ => write!(f, "Kafka Error") // TODO Add others
        }
    }
}
