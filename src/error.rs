use std::result;
use std::error;
use std::io;
use std::fmt;

use byteorder;

/// A type for results generated by this crate's functions where the `Err` type
/// is hard-wired to `enums::Error`.
///
/// This typedef is generally used to avoid writing out `enums::Error` directly and
/// is otherwise a direct mapping to `std::result::Result`.

pub type Result<T> = result::Result<T, Error>;


/// The error type for various operations.
///
/// Extends `io::Error` with following
///
/// `InvalidInputSnappy` - Snappy failed to decode response from Kafka
///
/// `UnexpectedEOF` - Raised from `byteorder` when decoding values fails.
///
/// `UnexpectedError` - We don't know what happened here
///
/// `NoHostReachable` - Unable to reach any host.
///
/// `UnableToSendAll` - Write operation on the underlying socket failed to send all the data
///

#[derive(Debug)]
pub enum Error {
    Io(io::Error),
    InvalidInputSnappy,
    UnexpectedEOF,
    UnexpectedError,
    NoHostReachable,
    UnableToSendAll
}


impl From<io::Error> for Error {
    fn from(err: io::Error) -> Error { Error::Io(err) }
}


impl From<byteorder::Error> for Error {
    fn from(err: byteorder::Error) -> Error {
        match err {
            byteorder::Error::UnexpectedEOF => Error::UnexpectedEOF,
            byteorder::Error::Io(err) => Error::Io(err)
        }
    }
}

impl error::Error for Error {
    fn description(&self) -> &str {
        match *self {
            Error::Io(ref err) => error::Error::description(err),
            Error::InvalidInputSnappy => "Snappy decode error. Invalid Input",
            Error::UnexpectedEOF => "Unexpected EOF",
            Error::UnexpectedError => "Unexpected Error",
            Error::NoHostReachable => "No Host Reachable",
            Error::UnableToSendAll => "Unable to send all data to Kafka"
        }
    }

    fn cause(&self) -> Option<&error::Error> {
        match *self {
            Error::Io(ref err) => err.cause(),
            _ => None
        }
    }
}

impl fmt::Display for Error {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            Error::Io(ref err) => err.fmt(f),
            Error::InvalidInputSnappy => write!(f, "{}", "Snappy decode error. Invalid Input"),
            Error::UnexpectedEOF => write!(f, "Unexpected EOF"),
            Error::UnexpectedError => write!(f, "Unexpected Error"),
            Error::NoHostReachable => write!(f, "No Host Reachable"),
            Error::UnableToSendAll => write!(f, "Unable to send all data to Kafka")
        }
    }
}
